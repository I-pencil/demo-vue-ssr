const config = require('./config')
const webpack = require('webpack')
const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const compression = require('compression')
const microcache = require('route-cache')
// https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
const { createBundleRenderer } = require('vue-server-renderer')

const outputPath = config.build.assetsRoot // /dist/ 这里和配置文件output路径一致

const resolve = file => path.resolve(__dirname, file)

// default port where dev server listens for incoming traffic
const port = process.env.PORT || config.dev.port
const isProduction = process.env.NODE_ENV === 'production'
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const app = express()


const serverInfo = `express/${require('express/package.json').version}` +
  `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

function createRenderer(bundle, options) {
  return createBundleRenderer(bundle, Object.assign(options, {
    runInNewContext: false, // 推荐
    cache: LRU({
      max: 1000,
      maxAge: 1000 * 60 * 15
    }),
    // this is only needed when vue-server-renderer is npm-linked
    basedir: resolve('./dist'),
  }))
}

let renderer
let readyPromise
const templatePath = resolve('./src/index.template.html')
if (isProduction) {
  // In production: create server renderer using server bundle and index HTML
  // template from real fs.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  const bundlePath = path.join(outputPath, 'vue-ssr-server-bundle.json')
  const bundle = require(bundlePath)
  // src/index.html is processed by html-webpack-plugin to inject
  // build assets and output as dist/index.html.
  const template = fs.readFileSync(resolve(templatePath), 'utf-8')
  const clientManifest = require('./dist/vue-ssr-client-manifest.json')
  renderer = createRenderer(bundle, {
    template,
    clientManifest
  })
} else {
  // In development: setup the dev server with watch and hot-reload,
  // and create a new renderer on bundle / index template update.
  readyPromise = require('./build/setup-dev-server')(
    app,
    templatePath,
    (bundle, options) => {
      renderer = createRenderer(bundle, options)
  })
}

const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProduction ? 60 * 60 * 24 * 30 : 0
})

// serve pure static assets
// var staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)
// app.use(staticPath, express.static('./static'))
app.use(compression({ threshold: 0 }))
app.use('/dist', serve('./dist', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use(microcache.cacheSeconds(1, req => useMicroCache && req.originalUrl))

function render(req, res) {
  const s = Date.now()

  res.setHeader("Content-Type", "text/html")
  res.setHeader("Server", serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if (err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = { url: req.url }
  renderer.renderToString(context, (err, html) => {
    if (err) {
      return handleError(err)
    } else {
      res.end(html)
    }
  })

}

app.get('*', isProduction ? render : (req, res) => {
  console.log('url----', req.url)
  readyPromise.then(() => render(req, res))
})

app.listen(port, () => {
  console.log(`server started at localhost:${port}`)
})
